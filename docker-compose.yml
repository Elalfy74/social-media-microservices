version: '2'
services:
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes

  kafka:
    image: 'bitnami/kafka:3'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper
    restart: on-failure
  init-kafka:
    image: 'bitnami/kafka:3'
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      '
      # blocks until kafka is reachable
      bin/kafka-topics.sh --bootstrap-server kafka:9092 --list

      bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic flight.email.topic  --replication-factor 1 --partitions 2
     
      echo -e 'Created kafka topics:'
      bin/kafka-topics.sh --bootstrap-server kafka:9092 --list
      '
  auth-db:
    image: postgres:13
    ports:
      - 5434:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: auth
  # auth:
  #   image: mssocialmedia/auth
  #   command: sh -c " npx prisma migrate deploy && npx prisma generate && yarn start "
  #   ports:
  #     - 3000:3000
  #   environment:
  #     DATABASE_URL: postgresql://postgres:123@auth-db:5432/auth?schema=public
  #   depends_on:
  #     - auth-db

  posts-db:
    image: postgres:13
    ports:
      - 5435:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: posts
      
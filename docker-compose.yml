version: '2'
services:
  # zookeeper:
  #   image: 'bitnami/zookeeper:latest'
  #   ports:
  #     - '2181:2181'
  #   environment:
  #     - ALLOW_ANONYMOUS_LOGIN=yes

  # kafka:
  #   image: 'bitnami/kafka:3'
  #   ports:
  #     - '9092:9092'
  #   environment:
  #     - KAFKA_BROKER_ID=1
  #     # - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
  #     - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092

  #     - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
  #     - ALLOW_PLAINTEXT_LISTENER=yes
  #     - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
  #     - KAFKAJS_NO_PARTITIONER_WARNING=1
  #     - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     - KAFKA_INTER_BROKER_LISTENER_NAME=PLAINTEXT

  #   depends_on:
  #     - zookeeper
  #   restart: on-failure
  # init-kafka:
  #   image: 'bitnami/kafka:3'
  #   depends_on:
  #     - kafka
  #   entrypoint: [ '/bin/sh', '-c' ]
  #   command: |
  #     '
  #     # blocks until kafka is reachable
  #     kafka-topics.sh --bootstrap-server kafka:29092 --list

  #     kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic post.created.topic  --replication-factor 1 --partitions 1

  #     echo -e 'Created kafka topics:'
  #     kafka-topics.sh --bootstrap-server kafka:29092 --list
  #     '
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
  
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKAJS_NO_PARTITIONER_WARNING: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
  auth-db:
    image: postgres:13
    ports:
      - 5434:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: auth

  # auth:
  #   image: mssocialmedia/auth
  #   command: sh -c " npx prisma migrate deploy && npx prisma generate && yarn start "
  #   ports:
  #     - 3000:3000
  #   environment:
  #     DATABASE_URL: postgresql://postgres:123@auth-db:5432/auth?schema=public
  #   depends_on:
  #     - auth-db

  posts-db:
    image: postgres:13
    ports:
      - 5435:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: posts

  likes-comments-db:
    image: postgres:13
    ports:
      - 5436:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
      POSTGRES_DB: likes-comments